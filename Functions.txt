int ParNum = 5;  //number of particles
int ParCood[ParNum, 4];  //coordinate, radius and velocity of each particle: {x-cood,y-cood,radius,velocity}
int TrapNum = 3;   //number of trap
int TrapCood[TrapNum, 3];  //coordinate and radius of trap  : {x-cood,y-cood,radius}
  
//Set the particle on the map
void SetPar(int number, int Cood[4]){
  ParCood[number][o] = Cood[0];
  ParCood[number][1] = Cood[1];
  ParCood[number][2] = Cood[2];
  ParCood[number][3] = Cood[3];
}

//Set the trap on the map
void SetTrap(int number, int Cood[3]){
  TrapCood[number][o] = Cood[0];
  TrapCood[number][1] = Cood[1];
  TrapCood[number][2] = Cood[2];
}

 // Generates and prints a random float number between 0 and 1
void RanNum(){
  srand(time(NULL));
  float random_fl = (float)rand() / RAND_MAX;
  return random_fl;
}

//Calculate probability
void Schro(Cood[4],Loc[3]){
  return probability;// Function to calculate  to be determined
}

//Tell catch or not
void Catch(int PCood[4], int TCood[3]){
  if (RanNum() <= Schro(PCood[4],TCood[3])){
    return true;
  } else{
    return false;
  }
}

//Detection on particle
void Detect(int Loc[3], boolean Mode){
  if (Mode = true){
    //Detection on location
    return probability
  }else{
    //Detection on momentum
    return momentum
  }
}

//Movement of particles after being detected
void Reaction(int PNum,int =PCood[4],int Detect[3]){
  ParCood[PNum][0] = ;
  ParCood[PNum][1] = ;
  ParCood[PNum][2] = ;
  ParCood[PNum][3] = ;  //Setting new coordinate of the particle
}


//Set potential energy
void Potential(){
  //no idea at all
}

